using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using System.Drawing;
using System.IO;
using Newtonsoft.Json;
using Newtonsoft.Json.Linq;
using System.Reflection;
using System.Text.RegularExpressions;


//namespace Playground
//{


//    public class Example
//    {
//        public static void Main()
//        {
//            /*
//            // A simple source for demonstration purposes. Modify this path as necessary.
//            String[] files = System.IO.Directory.GetFiles(@"C:\Users\Public\Pictures\Sample Pictures", "*.jpg");
//            String newDir = @"C:\Users\Public\Pictures\Sample Pictures\Modified";
//            System.IO.Directory.CreateDirectory(newDir);

//            // Method signature: Parallel.ForEach(IEnumerable<TSource> source, Action<TSource> body)
//            // Be sure to add a reference to System.Drawing.dll.
//            Parallel.ForEach(files, (currentFile) =>
//            {
//                // The more computational work you do here, the greater 
//                // the speedup compared to a sequential foreach loop.
//                String filename = System.IO.Path.GetFileName(currentFile);
//                var bitmap = new Bitmap(currentFile);

//                bitmap.RotateFlip(RotateFlipType.Rotate180FlipNone);
//                bitmap.Save(Path.Combine(newDir, filename));

//                // Peek behind the scenes to see how work is parallelized.
//                // But be aware: Thread contention for the Console slows down parallel loops!!!

//                Console.WriteLine("Processing {0} on thread {1}", filename, Thread.CurrentThread.ManagedThreadId);
//                //close lambda expression and method invocation
//            });


//            // Keep the console window open in debug mode.
//            Console.WriteLine("Processing complete. Press any key to exit.");
//            Console.ReadKey();
//            */

//            //// object you have to unbox and convert to other type
//            //object oTest;
//            //oTest = "test";
//            //string oTestString = (string)oTest;
//            //Console.WriteLine(oTestString.Length);
//            //// Console.WriteLine((string)oTest.Length); // error: if you don't unbox them to other value
//            //Console.ReadLine();

//            ////var vTest; // error: you have to assign something
//            //var vTest = "test";
//            //Console.WriteLine(vTest.Length);
//            //Console.ReadLine();

//            ////var vTest; // you can just assign anything, then it will be the type
//            //dynamic dTest;
//            //dTest = "test";
//            //Console.WriteLine(dTest.Length);
//            //Console.ReadLine();

//            //// object: call out method
//            //// it works
//            //dynamic oTest;
//            //if (tryOut(out oTest))
//            //{
//            //    Console.WriteLine("it is true.");
//            //}

//            //Console.WriteLine(oTest.Length);
//            //Console.ReadLine();


//            //string json = @"{
//            //      CPU: 'Intel',
//            //      Drives: [
//            //        'DVD read/writer',
//            //        '500 gigabyte hard drive'
//            //      ]
//            //    }";

//            //JObject o = JObject.Parse(json);

//            //string j = JsonConvert.SerializeObject(json);

//            //string t1 = "test";
//            //string t2 = "test2";
//            //string test = $"{t1} - {t2}";
//            //Console.WriteLine(test);


//            //// ++ 
//            //double x;
//            //x = 1.5;
//            //Console.WriteLine(++x);     // before 
//            //x = 1.5;
//            //Console.WriteLine(x++);     // after - 1.5
//            //Console.WriteLine(x);
//            //Console.ReadLine();

//            /*
//            Output
//            2.5
//            1.5
//            2.5
//            */

//            //// +=
//            ////addition
//            //int a = 5;
//            //a += 6;
//            //Console.WriteLine(a);

//            ////string concatenation
//            //string s = "Hello";
//            //s += " world";
//            //Console.WriteLine(s);

//            ///*
//            //Output:
//            //11
//            //Hello world
//            //*/



//        }

//        //public static bool tryOut(out object result)
//        //{
//        //    result = "test";
//        //    return true;
//        //}

//        //public static bool tryOut(out dynamic result)
//        //{
//        //    result = "test";
//        //    return true;
//        //}


//        //public static bool tryOut(out object result)
//        //{
//        //    object temp = "test";
//        //    if (temp is string)
//        //    {
//        //        result = (string)temp;
//        //    }
//        //    else
//        //    {
//        //        result = null;
//        //        return false;
//        //    }
//        //    return true;
//        //}
//    }


//}

//namespace Playground
//{
//    public class MyClass
//    {
//        public virtual int AddNumb(int numb1, int numb2)
//        {
//            int result = numb1 + numb2;
//            return result;
//        }
//    }

//    class Test<T>
//    {
//        T _value;

//        public Test(T t)
//        {
//            _value = t;
//        }
//    }




//    class MyMainClass
//    {
//        public static void Main()
//        {
//            //Console.WriteLine("\nReflection.MethodInfo");
//            //MyClass myClassObj = new MyClass();
//            //Type myTypeObj = myClassObj.GetType();
//            //MethodInfo myMethodInfo = myTypeObj.GetMethod("AddNumb");

//            //object[] mParam = new object[] { 5, 10 };
//            //// Get and display the Invoke method.
//            //Console.Write("\nFirst method - " + myTypeObj.FullName + " returns " +
//            //                     myMethodInfo.Invoke(myClassObj, mParam) + "\n");
//            //Console.ReadLine();
//            //return 0;


//            /*
//            List<string> test = null;

//            foreach (var t in test.IfNullThenEmpty())
//            {
//                Console.WriteLine(t);
//            }
//            Console.ReadLine();
//            */


//            var test = F();

//        }

//        static List<int> F()
//        {
//            yield break;
//        }
//    }

//}




//namespace Playground
//{
//    class test 
//    {
//        static IEnumerable<int> YieldReturn()
//        {
//            yield return 1;
//            yield return 2;
//            yield return 3;
//        }
//        static void Main(string[] args)
//        {
//            IEnumerable<string> test = new[] { "a", "b", "c" };
//        }
//    }
//}

/*
/// <summary>
/// class: StringFunctions.cs
/// Test : MaskbeforeLast4characaters
/// </summary>
namespace Playground
{
    class testMaskbeforeLast4characaters
    {
        /// <summary>
		/// Method to mask credit card before last 4 characters
		/// </summary>
        static void Main(string[] args)
        {
            // Arrange
            var cards = new List<Card>()
            {
                new Card(){ CardNumber = "23423sdfsfsdf42423432424", CardToken = "T1111" },
                new Card() { CardNumber = "2222", CardToken = "T2222" },
                new Card() { CardNumber = "3333", CardToken = "T3333" }

            };
            string c = cards.FirstOrDefault(x => x.CardToken == "T1111")?.CardNumber;

            // Act
            try
            {
                //c = string.Empty;
                //c = null;
                // c = string.IsNullOrEmpty(c) ? null : Regex.Replace(c, @"(\d{12})", string.Concat(Enumerable.Repeat("X", 12))) ;
                // c = string.Format("{0}{1}", string.Concat(Enumerable.Repeat("X", 12)), c.Substring(c.Length - 4, 4));
                // c = c.Substring(c.Length - 4, 4).PadLeft(16, 'X');
                c = StringFunctions.maskbeforeLast4characaters(c);
            }
            catch (Exception e)
            {
                Console.WriteLine(e.Message);
            }

            // 
            Console.WriteLine("card number: " + c);
            Console.ReadLine();
        }    
    }

    public class Card
    {
        public string CardNumber { get; set; }
        public string CardToken { get; set; }
     }

}

    */

namespace Playground
{
    public class Demo
    {

        // Main Method 
        public static void Main(string[] args)
        {
            GarbageCollectionMethods.maxSupportedGenerations();
            GarbageCollectionMethods.getObjGeneration();

            Console.ReadLine();
        }
        
    }
}




